import SwiftUI

struct SelectRoleGoalView: View {
    @State var activatedCircleNumber: Int = 3
    @State var headerTitleMessage: String = "ÏïÑÏπ¥Îç∞ÎØ∏ÏóêÏÑú Ïñ¥Îñ§ Î™©ÌëúÎ•º Í∑∏Î¶¨Í≥† ÏûàÎÇòÏöî?"
    @State var isHeaderDescriptionVisible: Bool = false
//    @State var pickerChosenText = "iOS Í∞úÎ∞úÏûê"
//    @State var pickerAccentColor = pickerEmptyGray
    @ObservedObject var card: CardDetailData
    
    // Picker Í¥ÄÎ†®
    
    //show and hide ÎìúÎ°≠Îã§Ïö¥Î©îÎâ¥
    @State private var isOptionsPresented: Bool = false
    @State var selectedOption : GoalOption? = nil  // ÎÇòÏ§ëÏóê ÏòµÏÖò Î≤àÌò∏Î°ú Î≥ÄÍ≤Ω
    
    @State var goNext: Bool = false
    // bind user selection
    //dropdownÏùò placeholder
    let placeHolder: String = "ÎÇ¥ Î™©Ìëú ÏÑ†ÌÉù"
    
    // Sheet Í¥ÄÎ†®
    @State var showingSheet = false
    @State var sheetUserInputText = ""
    
    var body: some View {
        VStack{
            CardGenerateViewHeader(activatedCircleNumber: activatedCircleNumber, headerTitleMessage: headerTitleMessage, isHeaderDescriptionVisible: isHeaderDescriptionVisible)
            ZStack (alignment: .top){
                ZStack(alignment: .leading) { // Ïπ¥Îìú ÎÇ¥Î∂Ä Î∑∞
                    RoundedRectangle(cornerRadius: 32)
                        .stroke(Color(strokeGray), lineWidth: 1)
                        .frame(width: 315, height: screenHeight*0.5, alignment: .center)
                    
                    VStack(alignment: .leading) { // ÎÇ¥Î∂Ä ÌÖçÏä§Ìä∏ + Dropdown Î≤ÑÌäº Ïä§ÌÉùÎ∑∞
                        Text("ÎÇòÎäî\nÏïÑÏπ¥Îç∞ÎØ∏ÏóêÏÑúÏùò\nÌåÄ ÌòëÏóÖÏùÑ ÌÜµÌï¥")
                            .font(.system(size: 27, weight: .regular))
                            .lineSpacing(10)
                        
                        HStack { // DropdownÎ≤ÑÌäº + Î°úÏÑú
                            // Dropdown Î≤ÑÌäº
                            Button(action: {

                                withAnimation{
                                    self.isOptionsPresented.toggle()
                                }

                            }){
                                HStack(spacing: 15.43) {
                                    Text(
                                        //üî¥ ÌÖçÏä§Ìä∏ Î°úÏßÅ Î∞îÍæ∏Í∏∞ - ÏÇºÌï≠Ïó∞ÏÇ∞ÏûêÎ°ú Î∂ÑÍ∏∞
                                        
                                        // SelectedOptionÏù¥ nilÏùº Í≤ΩÏö∞ => self.placeHolder
                                        // SelectedOptinÏù¥ nilÏù¥ ÏïÑÎãê Í≤ΩÏö∞
                                            // => selectedOption?.title ?? " "
                                            // SelectedOptionÏù¥ ÏßÅÏ†ëÏûÖÎ†•Ïù¥Í≥†, sheetUserInputTextÍ∞Ä ÏûàÏùÑ Í≤ΩÏö∞
                                               // => sheetUserInputText
                                            
                                        selectedOption != nil ? (selectedOption!.title=="ÏßÅÏ†ë ÏûÖÎ†•" && sheetUserInputText.isEmpty==false ? sheetUserInputText : selectedOption?.title ?? " ") : self.placeHolder
                                            
                                    )
                                            .font(.system(size:22, weight: .light))
                                            .foregroundColor(selectedOption != nil ? mainAccentColor : .gray)
                                            .multilineTextAlignment(.leading)

                                        Image(systemName: self.isOptionsPresented ? "chevron.up.circle" : "chevron.down.circle")
                                            .font(.system(size:22, weight: .regular))
                                            .foregroundColor(selectedOption != nil ? mainAccentColor : pickerEmptyGray)

                                    }
                                    .padding(.horizontal)
                                    .padding(.vertical, 7)
                                    .background(
                                        
                                        RoundedRectangle(cornerRadius: 12)
                                            .stroke(selectedOption != nil ? mainAccentColor : pickerEmptyGray, lineWidth: 2)
                                            .frame(maxHeight: 100)
                                    
                                    )
                                    .frame(maxWidth: 251, alignment: .leading)
                                    .padding(.vertical, 7)
                            }
                        }
                        Text("Î°úÏÑú ÏÑ±Ïû•ÌïòÍ≥† Ïã∂Ïñ¥Ïöî")
                            .font(.system(size: 27, weight: .regular))
                    }
                    .padding(.leading,32)
                }
                .padding(.top, 20)
                
                // ÌîºÏª§ trial2
                if self.isOptionsPresented {
                    GoalPickerMenuList { option in
                        isOptionsPresented = false
                        selectedOption = option
                        if selectedOption!.title == "ÏßÅÏ†ë ÏûÖÎ†•" {
                            showingSheet.toggle()
                        }
                    }
                    .padding(.leading, 70)
                    .padding(.trailing, 150)
                    .offset(y: 180)
                }
                
            }
            cardGenerateViewsButton(title:"Îã§Ïùå", disableCondition: self.selectedOption == nil || selectedOption!.title == "ÏßÅÏ†ë ÏûÖÎ†•" && sheetUserInputText.isEmpty, action: {
                // Card Generate data update
                card.growthTarget = selectedOption != nil ? (selectedOption!.title=="ÏßÅÏ†ë ÏûÖÎ†•" && sheetUserInputText.isEmpty==false ? sheetUserInputText : selectedOption?.title ?? " ") : self.placeHolder
                goNext = true
            }).padding(.top, 20).navigationDestination(isPresented: $goNext){
//                MyWishSkillsetTextEditorView(card: card)
                SelectMySkillView(card: card, isMySkill: false)
            }
        }
        // Sheet Open
        .sheet(isPresented: $showingSheet) {
            RoleGoalInputSheetView(sendInputText: $sheetUserInputText)
                .presentationDetents([.height(217)])
                .presentationDragIndicator(.hidden)
        }
    }
}
